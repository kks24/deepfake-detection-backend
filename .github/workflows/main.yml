# .github/workflows/main.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    # - name: Install test dependencies
    #   run: |
    #     pip install -r requirements-test.txt
        
    # - name: Run tests with coverage
    #   run: |
    #     python -m pytest --cov=app tests/ --cov-report=xml
        
    # - name: Upload coverage reports
    #   uses: codecov/codecov-action@v3
    #   with:
    #     file: ./coverage.xml
    #     fail_ci_if_error: true

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_HUB_USERNAME }}/deepfake-detection-backend:latest
          ${{ secrets.DOCKER_HUB_USERNAME }}/deepfake-detection-backend:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/deepfake-detection-backend:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/deepfake-detection-backend:buildcache,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          echo "Creating deployment directory..."
          mkdir -p ~/deepfake-detection
          cd ~/deepfake-detection

          echo "Creating Docker Compose configuration..."
          cat > docker-compose.yml << 'EOL'
          version: '3.8'
          
          services:
            api:
              image: kks24/deepfake-detection-backend:latest
              ports:
                - "5000:5000"
              volumes:
                - ./models:/app/models
                - ./logs:/app/logs
              environment:
                - FLASK_APP=app/__init__.py
                - FLASK_ENV=production
                - MODEL_PATH=models/facenet_real_fake_classifier_final.keras
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:5000/api/v1/detect/health"]
                interval: 30s
                timeout: 10s
                retries: 3
          EOL

          echo "Creating model directory..."
          mkdir -p models
          mkdir -p logs

          echo "Verifying Docker Compose installation..."
          if ! command -v docker compose &> /dev/null; then
            echo "Installing Docker Compose..."
            sudo apt-get update
            sudo apt-get install -y docker-compose-plugin
          fi

          echo "Pulling latest image..."
          docker compose pull

          echo "Starting services..."
          docker compose up -d

          echo "Waiting for service to start..."
          sleep 10

          echo "Checking service status..."
          docker compose ps

          echo "Checking container logs..."
          docker compose logs